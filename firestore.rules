/**
 * @fileoverview Firestore Security Rules for Ye-Games application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data protection, enforcing strict controls
 * on data access. It is designed to allow for rapid prototyping by focusing
 * on authorization without imposing rigid schema validation.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game entities.
 * - /tags/{tagId}: Stores tag entities.
 * - /analytics/live-stats: Stores a single document with live analytics data.
 *
 * Key Security Decisions:
 * - Listing of games and tags is allowed for all users.
 * - Access to analytics data is explicitly denied to all users.
 *
 * Denormalization for Authorization:
 * Not applicable, as the ruleset does not currently implement any denormalization strategies.
 * This is a prototype, so no data shape validation is performed.
 *
 * Structural Segregation:
 * Not applicable, as the ruleset does not employ structural segregation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read Games, but only allows authenticated users to create, update, or delete them.
     * @path /games/{gameId}
     * @allow (get, list): All users can read/list games.
     * @allow (create, update, delete): No one can create, update or delete games.
     * @deny (create, update, delete): All unauthorized attempts to write game data.
     * @principle Allows public read access while restricting writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read Tags, but no one can create, update, or delete them.
     * @path /tags/{tagId}
     * @allow (get, list): All users can read/list tags.
     * @allow (create, update, delete): No one can create, update or delete tags.
     * @deny (create, update, delete): All unauthorized attempts to write tag data.
     * @principle Allows public read access while restricting writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Explicitly denies all access to the analytics document.
     * @path /analytics/live-stats
     * @allow (get, list, create, update, delete): never
     * @deny (get, list, create, update, delete): All access attempts.
     * @principle Enforces maximum security by denying all access.
     */
    match /analytics/live-stats {
      allow get, list, create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}