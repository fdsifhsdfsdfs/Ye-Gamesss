/**
 * @file Firebase Security Rules for Ye-Games application.
 *
 * Core Philosophy:
 * This ruleset focuses on securing access to game and tag data while restricting write access to analytics data.
 * Games and tags are publicly readable, but only authenticated users can create, update, or delete them.
 * The analytics data is read-only for everyone.
 *
 * Data Structure:
 * - /games/{gameId}: Stores individual game documents.
 * - /tags/{tagId}: Stores tag documents.
 * - /analytics/live-stats: Stores a single document with live analytics.
 *
 * Key Security Decisions:
 * - Games and tags are publicly readable but require authentication for write operations.
 * - Analytics data is read-only.
 * - No user-specific data or ownership is enforced. If ownership is later required for games or tags, the data model will need to be updated to include an `ownerId` field on each document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read games, but requires authentication to create, update, or delete them.
     * @path /games/{gameId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, authenticated writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read tags, but requires authentication to create, update, or delete them.
     * @path /tags/{tagId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, authenticated writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read the live-stats document, but no one can write to it.
     * @path /analytics/live-stats
     * @allow (get): if true
     * @deny (create, update, delete, list): if true
     * @principle Public read, no writes.
     */
    match /analytics/live-stats {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}